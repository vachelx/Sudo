package com.vachel.sudo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, String> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "key", true, "KEY");
        public final static Property TakeTime = new Property(1, long.class, "takeTime", false, "TAKE_TIME");
        public final static Property FinishDate = new Property(2, long.class, "finishDate", false, "FINISH_DATE");
        public final static Property Difficulty = new Property(3, int.class, "difficulty", false, "DIFFICULTY");
        public final static Property Mode = new Property(4, int.class, "mode", false, "MODE");
    }


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"KEY\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: key
                "\"TAKE_TIME\" INTEGER NOT NULL ," + // 1: takeTime
                "\"FINISH_DATE\" INTEGER NOT NULL ," + // 2: finishDate
                "\"DIFFICULTY\" INTEGER NOT NULL ," + // 3: difficulty
                "\"MODE\" INTEGER NOT NULL );"); // 4: mode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Record entity) {
        stmt.clearBindings();
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(1, key);
        }
        stmt.bindLong(2, entity.getTakeTime());
        stmt.bindLong(3, entity.getFinishDate());
        stmt.bindLong(4, entity.getDifficulty());
        stmt.bindLong(5, entity.getMode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(1, key);
        }
        stmt.bindLong(2, entity.getTakeTime());
        stmt.bindLong(3, entity.getFinishDate());
        stmt.bindLong(4, entity.getDifficulty());
        stmt.bindLong(5, entity.getMode());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // key
            cursor.getLong(offset + 1), // takeTime
            cursor.getLong(offset + 2), // finishDate
            cursor.getInt(offset + 3), // difficulty
            cursor.getInt(offset + 4) // mode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTakeTime(cursor.getLong(offset + 1));
        entity.setFinishDate(cursor.getLong(offset + 2));
        entity.setDifficulty(cursor.getInt(offset + 3));
        entity.setMode(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Record entity, long rowId) {
        return entity.getKey();
    }
    
    @Override
    public String getKey(Record entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Record entity) {
        return entity.getKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
